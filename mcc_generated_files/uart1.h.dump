<?xml version="1.0"?>
<dumps>
  <platform name="Native" char_bit="8" short_bit="16" int_bit="32" long_bit="64" long_long_bit="64" pointer_bit="64"/>
  <rawtokens>
    <file index="0" name="mcc_generated_files/uart1.h"/>
    <tok fileIndex="0" linenr="1" column="1" str="/**x  UART1 Generated Driver API Header Filexx  @Companyx    Microchip Technology Inc.xx  @File Namex    uart1.hxx  @Summaryx    This is the generated header file for the UART1 driver using PIC10 / PIC12 / PIC16 / PIC18 MCUsxx  @Descriptionx    This header file provides APIs for driver for UART1.x    Generation Information :x        Product Revision  :  PIC10 / PIC12 / PIC16 / PIC18 MCUs - 1.81.6x        Device            :  PIC18F27Q84x        Driver Version    :  2.4.0x    The generated drivers are tested against the following:x        Compiler          :  XC8 2.30 and abovex        MPLAB             :  MPLAB X 5.40x*/"/>
    <tok fileIndex="0" linenr="24" column="1" str="/*x    (c) 2018 Microchip Technology Inc. and its subsidiaries. x    x    Subject to your compliance with these terms, you may use Microchip software and any x    derivatives exclusively with Microchip products. It is your responsibility to comply with third party x    license terms applicable to your use of third party software (including open source software) that x    may accompany Microchip software.x    x    THIS SOFTWARE IS SUPPLIED BY MICROCHIP &quot;AS IS&quot;. NO WARRANTIES, WHETHER x    EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE, INCLUDING ANY x    IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS x    FOR A PARTICULAR PURPOSE.x    x    IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE, x    INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND x    WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP x    HAS BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE. TO x    THE FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL x    CLAIMS IN ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT x    OF FEES, IF ANY, THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS x    SOFTWARE.x*/"/>
    <tok fileIndex="0" linenr="47" column="1" str="#"/>
    <tok fileIndex="0" linenr="47" column="2" str="ifndef"/>
    <tok fileIndex="0" linenr="47" column="9" str="UART1_H"/>
    <tok fileIndex="0" linenr="48" column="1" str="#"/>
    <tok fileIndex="0" linenr="48" column="2" str="define"/>
    <tok fileIndex="0" linenr="48" column="9" str="UART1_H"/>
    <tok fileIndex="0" linenr="50" column="1" str="/**  Section: Included Files*/"/>
    <tok fileIndex="0" linenr="54" column="1" str="#"/>
    <tok fileIndex="0" linenr="54" column="2" str="include"/>
    <tok fileIndex="0" linenr="54" column="10" str="&lt;xc.h&gt;"/>
    <tok fileIndex="0" linenr="55" column="1" str="#"/>
    <tok fileIndex="0" linenr="55" column="2" str="include"/>
    <tok fileIndex="0" linenr="55" column="10" str="&lt;stdbool.h&gt;"/>
    <tok fileIndex="0" linenr="56" column="1" str="#"/>
    <tok fileIndex="0" linenr="56" column="2" str="include"/>
    <tok fileIndex="0" linenr="56" column="10" str="&lt;stdint.h&gt;"/>
    <tok fileIndex="0" linenr="58" column="1" str="#"/>
    <tok fileIndex="0" linenr="58" column="2" str="ifdef"/>
    <tok fileIndex="0" linenr="58" column="8" str="__cplusplus"/>
    <tok fileIndex="0" linenr="58" column="21" str="// Provide C++ Compatibility"/>
    <tok fileIndex="0" linenr="60" column="5" str="extern"/>
    <tok fileIndex="0" linenr="60" column="12" str="&quot;C&quot;"/>
    <tok fileIndex="0" linenr="60" column="16" str="{"/>
    <tok fileIndex="0" linenr="62" column="1" str="#"/>
    <tok fileIndex="0" linenr="62" column="2" str="endif"/>
    <tok fileIndex="0" linenr="64" column="1" str="/**  Section: Macro Declarations*/"/>
    <tok fileIndex="0" linenr="68" column="1" str="#"/>
    <tok fileIndex="0" linenr="68" column="2" str="define"/>
    <tok fileIndex="0" linenr="68" column="9" str="UART1_DataReady"/>
    <tok fileIndex="0" linenr="68" column="26" str="("/>
    <tok fileIndex="0" linenr="68" column="27" str="UART1_is_rx_ready"/>
    <tok fileIndex="0" linenr="68" column="44" str="("/>
    <tok fileIndex="0" linenr="68" column="45" str=")"/>
    <tok fileIndex="0" linenr="68" column="46" str=")"/>
    <tok fileIndex="0" linenr="70" column="1" str="/**  Section: Data Type Definitions*/"/>
    <tok fileIndex="0" linenr="74" column="1" str="typedef"/>
    <tok fileIndex="0" linenr="74" column="9" str="union"/>
    <tok fileIndex="0" linenr="74" column="15" str="{"/>
    <tok fileIndex="0" linenr="75" column="5" str="struct"/>
    <tok fileIndex="0" linenr="75" column="12" str="{"/>
    <tok fileIndex="0" linenr="76" column="9" str="unsigned"/>
    <tok fileIndex="0" linenr="76" column="18" str="perr"/>
    <tok fileIndex="0" linenr="76" column="23" str=":"/>
    <tok fileIndex="0" linenr="76" column="25" str="1"/>
    <tok fileIndex="0" linenr="76" column="26" str=";"/>
    <tok fileIndex="0" linenr="77" column="9" str="unsigned"/>
    <tok fileIndex="0" linenr="77" column="18" str="ferr"/>
    <tok fileIndex="0" linenr="77" column="23" str=":"/>
    <tok fileIndex="0" linenr="77" column="25" str="1"/>
    <tok fileIndex="0" linenr="77" column="26" str=";"/>
    <tok fileIndex="0" linenr="78" column="9" str="unsigned"/>
    <tok fileIndex="0" linenr="78" column="18" str="oerr"/>
    <tok fileIndex="0" linenr="78" column="23" str=":"/>
    <tok fileIndex="0" linenr="78" column="25" str="1"/>
    <tok fileIndex="0" linenr="78" column="26" str=";"/>
    <tok fileIndex="0" linenr="79" column="9" str="unsigned"/>
    <tok fileIndex="0" linenr="79" column="18" str="reserved"/>
    <tok fileIndex="0" linenr="79" column="27" str=":"/>
    <tok fileIndex="0" linenr="79" column="29" str="5"/>
    <tok fileIndex="0" linenr="79" column="30" str=";"/>
    <tok fileIndex="0" linenr="80" column="5" str="}"/>
    <tok fileIndex="0" linenr="80" column="6" str=";"/>
    <tok fileIndex="0" linenr="81" column="5" str="uint8_t"/>
    <tok fileIndex="0" linenr="81" column="13" str="status"/>
    <tok fileIndex="0" linenr="81" column="19" str=";"/>
    <tok fileIndex="0" linenr="82" column="1" str="}"/>
    <tok fileIndex="0" linenr="82" column="2" str="uart1_status_t"/>
    <tok fileIndex="0" linenr="82" column="16" str=";"/>
    <tok fileIndex="0" linenr="85" column="1" str="/**x  Section: UART1 APIsx*/"/>
    <tok fileIndex="0" linenr="89" column="1" str="/**x  @Summaryx    Initialization routine that takes inputs from the UART1 GUI.xx  @Descriptionx    This routine initializes the UART1 driver.x    This routine must be called before any other UART1 routine is called.xx  @Preconditionsx    Nonexx  @Paramx    Nonexx  @Returnsx    Nonexx  @Commentxx  @Examplex*/"/>
    <tok fileIndex="0" linenr="110" column="1" str="void"/>
    <tok fileIndex="0" linenr="110" column="6" str="UART1_Initialize"/>
    <tok fileIndex="0" linenr="110" column="22" str="("/>
    <tok fileIndex="0" linenr="110" column="23" str="void"/>
    <tok fileIndex="0" linenr="110" column="27" str=")"/>
    <tok fileIndex="0" linenr="110" column="28" str=";"/>
    <tok fileIndex="0" linenr="112" column="1" str="/**x  @Summaryx    Checks if the UART1 receiver ready for readingxx  @Descriptionx    This routine checks if UART1 receiver has received data x    and ready to be readxx  @Preconditionsx    UART1_Initialize() function should be calledx    before calling this functionx    UART1 receiver should be enabled before calling this x    functionxx  @Paramx    Nonexx  @Returnsx    Status of UART1 receiverx    TRUE: UART1 receiver is ready for readingx    FALSE: UART1 receiver is not ready for readingx    x  @Examplex    &lt;code&gt;x    void main(void)x    {x        volatile uint8_t rxData;x        x        // Initialize the devicex        SYSTEM_Initialize();x        x        while(1)x        {x            // Logic to echo received datax            if(UART1_is_rx_ready())x            {x                rxData = UART1_Read();x                if(UART1_is_tx_ready())x                {x                    UART1_Write(rxData);x                }x            }x        }x    }x    &lt;/code&gt;x*/"/>
    <tok fileIndex="0" linenr="158" column="1" str="bool"/>
    <tok fileIndex="0" linenr="158" column="6" str="UART1_is_rx_ready"/>
    <tok fileIndex="0" linenr="158" column="23" str="("/>
    <tok fileIndex="0" linenr="158" column="24" str="void"/>
    <tok fileIndex="0" linenr="158" column="28" str=")"/>
    <tok fileIndex="0" linenr="158" column="29" str=";"/>
    <tok fileIndex="0" linenr="160" column="1" str="/**x  @Summaryx    Checks if the UART1 transmitter is ready to transmit dataxx  @Descriptionx    This routine checks if UART1 transmitter is ready x    to accept and transmit data bytexx  @Preconditionsx    UART1_Initialize() function should have been calledx    before calling this function.x    UART1 transmitter should be enabled before calling x    this functionxx  @Paramx    Nonexx  @Returnsx    Status of UART1 transmitterx    TRUE: UART1 transmitter is readyx    FALSE: UART1 transmitter is not readyx    x  @Examplex    &lt;code&gt;x    void main(void)x    {x        volatile uint8_t rxData;x        x        // Initialize the devicex        SYSTEM_Initialize();x        x        while(1)x        {x            // Logic to echo received datax            if(UART1_is_rx_ready())x            {x                rxData = UART1_Read();x                if(UART1_is_tx_ready())x                {x                    UART1_Write(rxData);x                }x            }x        }x    }x    &lt;/code&gt;x*/"/>
    <tok fileIndex="0" linenr="206" column="1" str="bool"/>
    <tok fileIndex="0" linenr="206" column="6" str="UART1_is_tx_ready"/>
    <tok fileIndex="0" linenr="206" column="23" str="("/>
    <tok fileIndex="0" linenr="206" column="24" str="void"/>
    <tok fileIndex="0" linenr="206" column="28" str=")"/>
    <tok fileIndex="0" linenr="206" column="29" str=";"/>
    <tok fileIndex="0" linenr="208" column="1" str="/**x  @Summaryx    Checks if UART1 data is transmittedxx  @Descriptionx    This function return the status of transmit shift registerxx  @Preconditionsx    UART1_Initialize() function should be calledx    before calling this functionx    UART1 transmitter should be enabled and UART1_Writex    should be called before calling this functionxx  @Paramx    Nonexx  @Returnsx    Status of UART1 transmit shift registerx    TRUE: Data completely shifted out if the UART shift registerx    FALSE: Data is not completely shifted out of the shift registerx    x  @Examplex    &lt;code&gt;x    void main(void)x    {x        volatile uint8_t rxData;x        x        // Initialize the devicex        SYSTEM_Initialize();x        x        while(1)x        {x            if(UART1_is_tx_ready())x            {x                LED_0_SetHigh();x                UART1Write(rxData);x            }x            if(UART1_is_tx_done()x            {x                LED_0_SetLow();x            }x        }x    }x    &lt;/code&gt;x*/"/>
    <tok fileIndex="0" linenr="253" column="1" str="bool"/>
    <tok fileIndex="0" linenr="253" column="6" str="UART1_is_tx_done"/>
    <tok fileIndex="0" linenr="253" column="22" str="("/>
    <tok fileIndex="0" linenr="253" column="23" str="void"/>
    <tok fileIndex="0" linenr="253" column="27" str=")"/>
    <tok fileIndex="0" linenr="253" column="28" str=";"/>
    <tok fileIndex="0" linenr="255" column="1" str="/**x  @Summaryx    Gets the error status of the last read byte.xx  @Descriptionx    This routine gets the error status of the last read byte.xx  @Preconditionsx    UART1_Initialize() function should have been calledx    before calling this function. The returned value is onlyx    updated after a read is called.xx  @Paramx    Nonexx  @Returnsx    the status of the last read bytexx  @Examplexx&lt;code&gt;x    void main(void)x    {x        volatile uint8_t rxData;x        volatile uart1_status_t rxStatus;x        x        // Initialize the devicex        SYSTEM_Initialize();x        x        // Enable the Global Interruptsx        INTERRUPT_GlobalInterruptEnable();x        x        while(1)x        {x            // Logic to echo received datax            if(UART1_is_rx_ready())x            {x                rxData = UART1_Read();x                rxStatus = UART1_get_last_status();x                if(rxStatus.ferr){x                    LED_0_SetHigh();x                }x            }x        }x    }x    &lt;/code&gt;x */"/>
    <tok fileIndex="0" linenr="301" column="1" str="uart1_status_t"/>
    <tok fileIndex="0" linenr="301" column="16" str="UART1_get_last_status"/>
    <tok fileIndex="0" linenr="301" column="37" str="("/>
    <tok fileIndex="0" linenr="301" column="38" str="void"/>
    <tok fileIndex="0" linenr="301" column="42" str=")"/>
    <tok fileIndex="0" linenr="301" column="43" str=";"/>
    <tok fileIndex="0" linenr="303" column="1" str="/**x  @Summaryx    Read a byte of data from the UART1.xx  @Descriptionx    This routine reads a byte of data from the UART1.xx  @Preconditionsx    UART1_Initialize() function should have been calledx    before calling this function. The transfer status should be checked to seex    if the receiver is not empty before calling this function.xxxxUART1_DataReady is a macro which checks if any byte is received.xxCall this macro before using this function.xx  @Paramx    Nonexx  @Returnsx    A data byte received by the driver.xxx  @Examplexx&lt;code&gt;x            void main(void) {x                            // initialize the devicex                            SYSTEM_Initialize();x                            uint8_t data;xx                            // Enable the Global Interruptsx                            INTERRUPT_GlobalInterruptEnable();xx                            // Enable the Peripheral Interruptsx                            INTERRUPT_PeripheralInterruptEnable();xx                            printf(&quot;\t\tTEST CODE\n\r&quot;);xx//Enable redirect STDIO to USART before using printf statementsx                            printf(&quot;\t\t---- ----\n\r&quot;);x                            printf(&quot;\t\tECHO TEST\n\r&quot;);x                            printf(&quot;\t\t---- ----\n\n\r&quot;);x                            printf(&quot;Enter any string: &quot;);x                            do{x                            data = UART1_Read();xx// Read data receivedx                            UART1_Write(data);xxx// Echo back the data receivedx                            }while(!UART1_DataReady);xx//check if any data is receivedxx                    }x    &lt;/code&gt;x*/"/>
    <tok fileIndex="0" linenr="350" column="1" str="uint8_t"/>
    <tok fileIndex="0" linenr="350" column="9" str="UART1_Read"/>
    <tok fileIndex="0" linenr="350" column="19" str="("/>
    <tok fileIndex="0" linenr="350" column="20" str="void"/>
    <tok fileIndex="0" linenr="350" column="24" str=")"/>
    <tok fileIndex="0" linenr="350" column="25" str=";"/>
    <tok fileIndex="0" linenr="352" column="2" str="/**x  @Summaryx    Writes a byte of data to the UART1.xx  @Descriptionx    This routine writes a byte of data to the UART1.xx  @Preconditionsx    UART1_Initialize() function should have been calledx    before calling this function. The transfer status should be checked to seex    if transmitter is not busy before calling this function.xx  @Paramx    txData  - Data byte to write to the UART1xx  @Returnsx    Nonex  x  @Examplex      &lt;code&gt;x          Refer to UART1_Read() for an examplexx      &lt;/code&gt;x*/"/>
    <tok fileIndex="0" linenr="375" column="1" str="void"/>
    <tok fileIndex="0" linenr="375" column="6" str="UART1_Write"/>
    <tok fileIndex="0" linenr="375" column="17" str="("/>
    <tok fileIndex="0" linenr="375" column="18" str="uint8_t"/>
    <tok fileIndex="0" linenr="375" column="26" str="txData"/>
    <tok fileIndex="0" linenr="375" column="32" str=")"/>
    <tok fileIndex="0" linenr="375" column="33" str=";"/>
    <tok fileIndex="0" linenr="379" column="1" str="/**x  @Summaryx    Set UART1 Framing Error Handlerxx  @Descriptionx    This API sets the function to be called upon UART1 framing errorxx  @Preconditionsx    Initialize  the UART1 before calling this APIxx  @Paramx    Address of function to be set as framing error handlerxx  @Returnsx    Nonex*/"/>
    <tok fileIndex="0" linenr="395" column="1" str="void"/>
    <tok fileIndex="0" linenr="395" column="6" str="UART1_SetFramingErrorHandler"/>
    <tok fileIndex="0" linenr="395" column="34" str="("/>
    <tok fileIndex="0" linenr="395" column="35" str="void"/>
    <tok fileIndex="0" linenr="395" column="40" str="("/>
    <tok fileIndex="0" linenr="395" column="41" str="*"/>
    <tok fileIndex="0" linenr="395" column="43" str="interruptHandler"/>
    <tok fileIndex="0" linenr="395" column="59" str=")"/>
    <tok fileIndex="0" linenr="395" column="60" str="("/>
    <tok fileIndex="0" linenr="395" column="61" str="void"/>
    <tok fileIndex="0" linenr="395" column="65" str=")"/>
    <tok fileIndex="0" linenr="395" column="66" str=")"/>
    <tok fileIndex="0" linenr="395" column="67" str=";"/>
    <tok fileIndex="0" linenr="397" column="1" str="/**x  @Summaryx    Set UART1 Overrun Error Handlerxx  @Descriptionx    This API sets the function to be called upon UART1 overrun errorxx  @Preconditionsx    Initialize  the UART1 module before calling this APIxx  @Paramx    Address of function to be set as overrun error handlerxx  @Returnsx    Nonex*/"/>
    <tok fileIndex="0" linenr="413" column="1" str="void"/>
    <tok fileIndex="0" linenr="413" column="6" str="UART1_SetOverrunErrorHandler"/>
    <tok fileIndex="0" linenr="413" column="34" str="("/>
    <tok fileIndex="0" linenr="413" column="35" str="void"/>
    <tok fileIndex="0" linenr="413" column="40" str="("/>
    <tok fileIndex="0" linenr="413" column="41" str="*"/>
    <tok fileIndex="0" linenr="413" column="43" str="interruptHandler"/>
    <tok fileIndex="0" linenr="413" column="59" str=")"/>
    <tok fileIndex="0" linenr="413" column="60" str="("/>
    <tok fileIndex="0" linenr="413" column="61" str="void"/>
    <tok fileIndex="0" linenr="413" column="65" str=")"/>
    <tok fileIndex="0" linenr="413" column="66" str=")"/>
    <tok fileIndex="0" linenr="413" column="67" str=";"/>
    <tok fileIndex="0" linenr="415" column="1" str="/**x  @Summaryx    Set UART1 Error Handlerxx  @Descriptionx    This API sets the function to be called upon UART1 errorxx  @Preconditionsx    Initialize  the UART1 module before calling this APIxx  @Paramx    Address of function to be set as error handlerxx  @Returnsx    Nonex*/"/>
    <tok fileIndex="0" linenr="431" column="1" str="void"/>
    <tok fileIndex="0" linenr="431" column="6" str="UART1_SetErrorHandler"/>
    <tok fileIndex="0" linenr="431" column="27" str="("/>
    <tok fileIndex="0" linenr="431" column="28" str="void"/>
    <tok fileIndex="0" linenr="431" column="33" str="("/>
    <tok fileIndex="0" linenr="431" column="34" str="*"/>
    <tok fileIndex="0" linenr="431" column="36" str="interruptHandler"/>
    <tok fileIndex="0" linenr="431" column="52" str=")"/>
    <tok fileIndex="0" linenr="431" column="53" str="("/>
    <tok fileIndex="0" linenr="431" column="54" str="void"/>
    <tok fileIndex="0" linenr="431" column="58" str=")"/>
    <tok fileIndex="0" linenr="431" column="59" str=")"/>
    <tok fileIndex="0" linenr="431" column="60" str=";"/>
    <tok fileIndex="0" linenr="443" column="1" str="#"/>
    <tok fileIndex="0" linenr="443" column="2" str="ifdef"/>
    <tok fileIndex="0" linenr="443" column="8" str="__cplusplus"/>
    <tok fileIndex="0" linenr="443" column="21" str="// Provide C++ Compatibility"/>
    <tok fileIndex="0" linenr="445" column="5" str="}"/>
    <tok fileIndex="0" linenr="447" column="1" str="#"/>
    <tok fileIndex="0" linenr="447" column="2" str="endif"/>
    <tok fileIndex="0" linenr="449" column="1" str="#"/>
    <tok fileIndex="0" linenr="449" column="2" str="endif"/>
    <tok fileIndex="0" linenr="449" column="9" str="// UART1_H"/>
    <tok fileIndex="0" linenr="450" column="1" str="/** End of File*/"/>
  </rawtokens>
  <suppressions>
  </suppressions>
<dump cfg="">
  <standards>
    <c version="c11"/>
    <cpp version="c++20"/>
  </standards>
  <directivelist>
    <directive file="mcc_generated_files/uart1.h" linenr="47" str="#ifndef UART1_H"/>
    <directive file="mcc_generated_files/uart1.h" linenr="48" str="#define UART1_H"/>
    <directive file="mcc_generated_files/uart1.h" linenr="54" str="#include &lt;xc.h&gt;"/>
    <directive file="mcc_generated_files/uart1.h" linenr="55" str="#include &lt;stdbool.h&gt;"/>
    <directive file="mcc_generated_files/uart1.h" linenr="56" str="#include &lt;stdint.h&gt;"/>
    <directive file="mcc_generated_files/uart1.h" linenr="58" str="#ifdef __cplusplus"/>
    <directive file="mcc_generated_files/uart1.h" linenr="62" str="#endif"/>
    <directive file="mcc_generated_files/uart1.h" linenr="68" str="#define UART1_DataReady (UART1_is_rx_ready())"/>
    <directive file="mcc_generated_files/uart1.h" linenr="443" str="#ifdef __cplusplus"/>
    <directive file="mcc_generated_files/uart1.h" linenr="447" str="#endif"/>
    <directive file="mcc_generated_files/uart1.h" linenr="449" str="#endif"/>
  </directivelist>
  <tokenlist>
    <token id="0x7f9919721430" file="mcc_generated_files/uart1.h" linenr="74" column="9" str="union" scope="0x7f991970a800" type="name"/>
    <token id="0x7f991970ab30" file="mcc_generated_files/uart1.h" linenr="74" column="0" str="uart1_status_t" scope="0x7f991970a800" type="name"/>
    <token id="0x7f9919705070" file="mcc_generated_files/uart1.h" linenr="74" column="15" str="{" scope="0x7f991970a800" link="0x7f9919712290"/>
    <token id="0x7f9919705140" file="mcc_generated_files/uart1.h" linenr="76" column="9" str="int" scope="0x7f991970a800" type="name" isUnsigned="true"/>
    <token id="0x7f9919711490" file="mcc_generated_files/uart1.h" linenr="76" column="18" str="perr" scope="0x7f991970a800" type="name" varId="1"/>
    <token id="0x7f9919711700" file="mcc_generated_files/uart1.h" linenr="76" column="26" str=";" scope="0x7f991970a800"/>
    <token id="0x7f99197117d0" file="mcc_generated_files/uart1.h" linenr="77" column="9" str="int" scope="0x7f991970a800" type="name" isUnsigned="true"/>
    <token id="0x7f99197118a0" file="mcc_generated_files/uart1.h" linenr="77" column="18" str="ferr" scope="0x7f991970a800" type="name" varId="2"/>
    <token id="0x7f9919711b10" file="mcc_generated_files/uart1.h" linenr="77" column="26" str=";" scope="0x7f991970a800"/>
    <token id="0x7f9919711be0" file="mcc_generated_files/uart1.h" linenr="78" column="9" str="int" scope="0x7f991970a800" type="name" isUnsigned="true"/>
    <token id="0x7f9919711cb0" file="mcc_generated_files/uart1.h" linenr="78" column="18" str="oerr" scope="0x7f991970a800" type="name" varId="3"/>
    <token id="0x7f9919711e20" file="mcc_generated_files/uart1.h" linenr="78" column="26" str=";" scope="0x7f991970a800"/>
    <token id="0x7f9919711ef0" file="mcc_generated_files/uart1.h" linenr="79" column="9" str="int" scope="0x7f991970a800" type="name" isUnsigned="true"/>
    <token id="0x7f9919711f40" file="mcc_generated_files/uart1.h" linenr="79" column="18" str="reserved" scope="0x7f991970a800" type="name" varId="4"/>
    <token id="0x7f9919712030" file="mcc_generated_files/uart1.h" linenr="79" column="30" str=";" scope="0x7f991970a800"/>
    <token id="0x7f9919712080" file="mcc_generated_files/uart1.h" linenr="81" column="5" str="uint8_t" scope="0x7f991970a800" type="name"/>
    <token id="0x7f99197121f0" file="mcc_generated_files/uart1.h" linenr="81" column="13" str="status" scope="0x7f991970a800" type="name" varId="5"/>
    <token id="0x7f9919712240" file="mcc_generated_files/uart1.h" linenr="81" column="19" str=";" scope="0x7f991970a800"/>
    <token id="0x7f9919712290" file="mcc_generated_files/uart1.h" linenr="82" column="1" str="}" scope="0x7f991970a800" link="0x7f9919705070"/>
    <token id="0x7f991970ac00" file="mcc_generated_files/uart1.h" linenr="82" column="0" str=";" scope="0x7f991970a800"/>
    <token id="0x7f9919712590" file="mcc_generated_files/uart1.h" linenr="110" column="1" str="void" scope="0x7f991970a800" type="name"/>
    <token id="0x7f99197125e0" file="mcc_generated_files/uart1.h" linenr="110" column="6" str="UART1_Initialize" scope="0x7f991970a800" type="name" function="0x7f99197088e0" astParent="0x7f99197126b0"/>
    <token id="0x7f99197126b0" file="mcc_generated_files/uart1.h" linenr="110" column="22" str="(" scope="0x7f991970a800" link="0x7f9919712700" astOperand1="0x7f99197125e0" valueType-type="void"/>
    <token id="0x7f9919712700" file="mcc_generated_files/uart1.h" linenr="110" column="27" str=")" scope="0x7f991970a800" link="0x7f99197126b0"/>
    <token id="0x7f99197127d0" file="mcc_generated_files/uart1.h" linenr="110" column="28" str=";" scope="0x7f991970a800"/>
    <token id="0x7f9919712820" file="mcc_generated_files/uart1.h" linenr="158" column="1" str="bool" scope="0x7f991970a800" type="name"/>
    <token id="0x7f9919712870" file="mcc_generated_files/uart1.h" linenr="158" column="6" str="UART1_is_rx_ready" scope="0x7f991970a800" type="name" function="0x7f99197086e0" astParent="0x7f99197128c0"/>
    <token id="0x7f99197128c0" file="mcc_generated_files/uart1.h" linenr="158" column="23" str="(" scope="0x7f991970a800" link="0x7f9919712960" astOperand1="0x7f9919712870" valueType-type="bool"/>
    <token id="0x7f9919712960" file="mcc_generated_files/uart1.h" linenr="158" column="28" str=")" scope="0x7f991970a800" link="0x7f99197128c0"/>
    <token id="0x7f99197129b0" file="mcc_generated_files/uart1.h" linenr="158" column="29" str=";" scope="0x7f991970a800"/>
    <token id="0x7f9919705d40" file="mcc_generated_files/uart1.h" linenr="206" column="1" str="bool" scope="0x7f991970a800" type="name"/>
    <token id="0x7f9919712a80" file="mcc_generated_files/uart1.h" linenr="206" column="6" str="UART1_is_tx_ready" scope="0x7f991970a800" type="name" function="0x7f99197054c0" astParent="0x7f9919712ad0"/>
    <token id="0x7f9919712ad0" file="mcc_generated_files/uart1.h" linenr="206" column="23" str="(" scope="0x7f991970a800" link="0x7f9919712c30" astOperand1="0x7f9919712a80" valueType-type="bool"/>
    <token id="0x7f9919712c30" file="mcc_generated_files/uart1.h" linenr="206" column="28" str=")" scope="0x7f991970a800" link="0x7f9919712ad0"/>
    <token id="0x7f9919712c80" file="mcc_generated_files/uart1.h" linenr="206" column="29" str=";" scope="0x7f991970a800"/>
    <token id="0x7f9919712cd0" file="mcc_generated_files/uart1.h" linenr="253" column="1" str="bool" scope="0x7f991970a800" type="name"/>
    <token id="0x7f9919712d20" file="mcc_generated_files/uart1.h" linenr="253" column="6" str="UART1_is_tx_done" scope="0x7f991970a800" type="name" function="0x7f9919720c50" astParent="0x7f9919712d70"/>
    <token id="0x7f9919712d70" file="mcc_generated_files/uart1.h" linenr="253" column="22" str="(" scope="0x7f991970a800" link="0x7f9919712e10" astOperand1="0x7f9919712d20" valueType-type="bool"/>
    <token id="0x7f9919712e10" file="mcc_generated_files/uart1.h" linenr="253" column="27" str=")" scope="0x7f991970a800" link="0x7f9919712d70"/>
    <token id="0x7f9919712ee0" file="mcc_generated_files/uart1.h" linenr="253" column="28" str=";" scope="0x7f991970a800"/>
    <token id="0x7f9919712f30" file="mcc_generated_files/uart1.h" linenr="301" column="1" str="union" scope="0x7f991970a800" type="name"/>
    <token id="0x7f9919721500" file="mcc_generated_files/uart1.h" linenr="301" column="0" str="uart1_status_t" scope="0x7f991970a800" type="name"/>
    <token id="0x7f9919712f80" file="mcc_generated_files/uart1.h" linenr="301" column="16" str="UART1_get_last_status" scope="0x7f991970a800" type="name" function="0x7f9919711280" astParent="0x7f9919712fd0"/>
    <token id="0x7f9919712fd0" file="mcc_generated_files/uart1.h" linenr="301" column="37" str="(" scope="0x7f991970a800" link="0x7f9919713070" astOperand1="0x7f9919712f80"/>
    <token id="0x7f9919713070" file="mcc_generated_files/uart1.h" linenr="301" column="42" str=")" scope="0x7f991970a800" link="0x7f9919712fd0"/>
    <token id="0x7f99197130c0" file="mcc_generated_files/uart1.h" linenr="301" column="43" str=";" scope="0x7f991970a800"/>
    <token id="0x7f9919713110" file="mcc_generated_files/uart1.h" linenr="350" column="1" str="uint8_t" scope="0x7f991970a800" type="name"/>
    <token id="0x7f9919710a30" file="mcc_generated_files/uart1.h" linenr="350" column="9" str="UART1_Read" scope="0x7f991970a800" type="name" function="0x7f9919711320" astParent="0x7f9919710a80"/>
    <token id="0x7f9919710a80" file="mcc_generated_files/uart1.h" linenr="350" column="19" str="(" scope="0x7f991970a800" link="0x7f9919710b20" astOperand1="0x7f9919710a30" valueType-type="char" valueType-sign="unsigned"/>
    <token id="0x7f9919710b20" file="mcc_generated_files/uart1.h" linenr="350" column="24" str=")" scope="0x7f991970a800" link="0x7f9919710a80"/>
    <token id="0x7f9919710b70" file="mcc_generated_files/uart1.h" linenr="350" column="25" str=";" scope="0x7f991970a800"/>
    <token id="0x7f9919710bc0" file="mcc_generated_files/uart1.h" linenr="375" column="1" str="void" scope="0x7f991970a800" type="name"/>
    <token id="0x7f9919710c10" file="mcc_generated_files/uart1.h" linenr="375" column="6" str="UART1_Write" scope="0x7f991970a800" type="name" function="0x7f9919711980" astParent="0x7f9919710c60"/>
    <token id="0x7f9919710c60" file="mcc_generated_files/uart1.h" linenr="375" column="17" str="(" scope="0x7f991970a800" link="0x7f9919710dd0" astOperand1="0x7f9919710c10" astOperand2="0x7f9919710d80" valueType-type="void"/>
    <token id="0x7f9919710d30" file="mcc_generated_files/uart1.h" linenr="375" column="18" str="uint8_t" scope="0x7f991970a800" type="name"/>
    <token id="0x7f9919710d80" file="mcc_generated_files/uart1.h" linenr="375" column="26" str="txData" scope="0x7f991970a800" type="name" varId="6" variable="0x7f9919720cf0" astParent="0x7f9919710c60" valueType-type="char" valueType-sign="unsigned"/>
    <token id="0x7f9919710dd0" file="mcc_generated_files/uart1.h" linenr="375" column="32" str=")" scope="0x7f991970a800" link="0x7f9919710c60"/>
    <token id="0x7f9919710e20" file="mcc_generated_files/uart1.h" linenr="375" column="33" str=";" scope="0x7f991970a800"/>
    <token id="0x7f9919710e70" file="mcc_generated_files/uart1.h" linenr="395" column="1" str="void" scope="0x7f991970a800" type="name"/>
    <token id="0x7f9919710ec0" file="mcc_generated_files/uart1.h" linenr="395" column="6" str="UART1_SetFramingErrorHandler" scope="0x7f991970a800" type="name" function="0x7f9919711a20" astParent="0x7f9919710f10"/>
    <token id="0x7f9919710f10" file="mcc_generated_files/uart1.h" linenr="395" column="34" str="(" scope="0x7f991970a800" link="0x7f99197208f0" astOperand1="0x7f9919710ec0" astOperand2="0x7f9919720820" valueType-type="void"/>
    <token id="0x7f9919710fe0" file="mcc_generated_files/uart1.h" linenr="395" column="35" str="void" scope="0x7f991970a800" type="name" astParent="0x7f9919711030"/>
    <token id="0x7f9919711030" file="mcc_generated_files/uart1.h" linenr="395" column="40" str="(" scope="0x7f991970a800" link="0x7f9919711120" astParent="0x7f9919720820" astOperand1="0x7f9919710fe0" astOperand2="0x7f9919711080" valueType-type="void"/>
    <token id="0x7f9919711080" file="mcc_generated_files/uart1.h" linenr="395" column="41" str="*" scope="0x7f991970a800" type="op" isArithmeticalOp="True" astParent="0x7f9919711030" astOperand1="0x7f99197110d0" valueType-type="void"/>
    <token id="0x7f99197110d0" file="mcc_generated_files/uart1.h" linenr="395" column="43" str="interruptHandler" scope="0x7f991970a800" type="name" varId="7" variable="0x7f9919708ed0" astParent="0x7f9919711080" valueType-type="void" valueType-pointer="1"/>
    <token id="0x7f9919711120" file="mcc_generated_files/uart1.h" linenr="395" column="59" str=")" scope="0x7f991970a800" link="0x7f9919711030"/>
    <token id="0x7f9919720820" file="mcc_generated_files/uart1.h" linenr="395" column="0" str="(" scope="0x7f991970a800" link="0x7f99197207d0" astParent="0x7f9919710f10" astOperand1="0x7f9919711030"/>
    <token id="0x7f99197207d0" file="mcc_generated_files/uart1.h" linenr="395" column="0" str=")" scope="0x7f991970a800" link="0x7f9919720820"/>
    <token id="0x7f99197208f0" file="mcc_generated_files/uart1.h" linenr="395" column="66" str=")" scope="0x7f991970a800" link="0x7f9919710f10"/>
    <token id="0x7f9919720940" file="mcc_generated_files/uart1.h" linenr="395" column="67" str=";" scope="0x7f991970a800"/>
    <token id="0x7f9919720990" file="mcc_generated_files/uart1.h" linenr="413" column="1" str="void" scope="0x7f991970a800" type="name"/>
    <token id="0x7f99197209e0" file="mcc_generated_files/uart1.h" linenr="413" column="6" str="UART1_SetOverrunErrorHandler" scope="0x7f991970a800" type="name" function="0x7f9919711570" astParent="0x7f9919720a30"/>
    <token id="0x7f9919720a30" file="mcc_generated_files/uart1.h" linenr="413" column="34" str="(" scope="0x7f991970a800" link="0x7f9919720db0" astOperand1="0x7f99197209e0" astOperand2="0x7f9919720d60" valueType-type="void"/>
    <token id="0x7f9919709fa0" file="mcc_generated_files/uart1.h" linenr="413" column="35" str="void" scope="0x7f991970a800" type="name" astParent="0x7f9919720b00"/>
    <token id="0x7f9919720b00" file="mcc_generated_files/uart1.h" linenr="413" column="40" str="(" scope="0x7f991970a800" link="0x7f9919720bf0" astParent="0x7f9919720d60" astOperand1="0x7f9919709fa0" astOperand2="0x7f9919720b50" valueType-type="void"/>
    <token id="0x7f9919720b50" file="mcc_generated_files/uart1.h" linenr="413" column="41" str="*" scope="0x7f991970a800" type="op" isArithmeticalOp="True" astParent="0x7f9919720b00" astOperand1="0x7f9919720ba0" valueType-type="void"/>
    <token id="0x7f9919720ba0" file="mcc_generated_files/uart1.h" linenr="413" column="43" str="interruptHandler" scope="0x7f991970a800" type="name" varId="8" variable="0x7f9919708c50" astParent="0x7f9919720b50" valueType-type="void" valueType-pointer="1"/>
    <token id="0x7f9919720bf0" file="mcc_generated_files/uart1.h" linenr="413" column="59" str=")" scope="0x7f991970a800" link="0x7f9919720b00"/>
    <token id="0x7f9919720d60" file="mcc_generated_files/uart1.h" linenr="413" column="0" str="(" scope="0x7f991970a800" link="0x7f9919711170" astParent="0x7f9919720a30" astOperand1="0x7f9919720b00"/>
    <token id="0x7f9919711170" file="mcc_generated_files/uart1.h" linenr="413" column="0" str=")" scope="0x7f991970a800" link="0x7f9919720d60"/>
    <token id="0x7f9919720db0" file="mcc_generated_files/uart1.h" linenr="413" column="66" str=")" scope="0x7f991970a800" link="0x7f9919720a30"/>
    <token id="0x7f9919720e00" file="mcc_generated_files/uart1.h" linenr="413" column="67" str=";" scope="0x7f991970a800"/>
    <token id="0x7f9919720e50" file="mcc_generated_files/uart1.h" linenr="431" column="1" str="void" scope="0x7f991970a800" type="name"/>
    <token id="0x7f9919720ea0" file="mcc_generated_files/uart1.h" linenr="431" column="6" str="UART1_SetErrorHandler" scope="0x7f991970a800" type="name" function="0x7f9919711610" astParent="0x7f9919720ef0"/>
    <token id="0x7f9919720ef0" file="mcc_generated_files/uart1.h" linenr="431" column="27" str="(" scope="0x7f991970a800" link="0x7f9919721240" astOperand1="0x7f9919720ea0" astOperand2="0x7f99197211f0" valueType-type="void"/>
    <token id="0x7f9919720f40" file="mcc_generated_files/uart1.h" linenr="431" column="28" str="void" scope="0x7f991970a800" type="name" astParent="0x7f9919721010"/>
    <token id="0x7f9919721010" file="mcc_generated_files/uart1.h" linenr="431" column="33" str="(" scope="0x7f991970a800" link="0x7f9919721100" astParent="0x7f99197211f0" astOperand1="0x7f9919720f40" astOperand2="0x7f9919721060" valueType-type="void"/>
    <token id="0x7f9919721060" file="mcc_generated_files/uart1.h" linenr="431" column="34" str="*" scope="0x7f991970a800" type="op" isArithmeticalOp="True" astParent="0x7f9919721010" astOperand1="0x7f99197210b0" valueType-type="void"/>
    <token id="0x7f99197210b0" file="mcc_generated_files/uart1.h" linenr="431" column="36" str="interruptHandler" scope="0x7f991970a800" type="name" varId="9" variable="0x7f99197094c0" astParent="0x7f9919721060" valueType-type="void" valueType-pointer="1"/>
    <token id="0x7f9919721100" file="mcc_generated_files/uart1.h" linenr="431" column="52" str=")" scope="0x7f991970a800" link="0x7f9919721010"/>
    <token id="0x7f99197211f0" file="mcc_generated_files/uart1.h" linenr="431" column="0" str="(" scope="0x7f991970a800" link="0x7f99197122e0" astParent="0x7f9919720ef0" astOperand1="0x7f9919721010"/>
    <token id="0x7f99197122e0" file="mcc_generated_files/uart1.h" linenr="431" column="0" str=")" scope="0x7f991970a800" link="0x7f99197211f0"/>
    <token id="0x7f9919721240" file="mcc_generated_files/uart1.h" linenr="431" column="59" str=")" scope="0x7f991970a800" link="0x7f9919720ef0"/>
    <token id="0x7f9919721310" file="mcc_generated_files/uart1.h" linenr="431" column="60" str=";" scope="0x7f991970a800"/>
  </tokenlist>
  <scopes>
    <scope id="0x7f991970a800" type="Global">
      <functionList>
        <function id="0x7f99197088e0" tokenDef="0x7f99197125e0" name="UART1_Initialize" type="Function"/>
        <function id="0x7f99197086e0" tokenDef="0x7f9919712870" name="UART1_is_rx_ready" type="Function"/>
        <function id="0x7f99197054c0" tokenDef="0x7f9919712a80" name="UART1_is_tx_ready" type="Function"/>
        <function id="0x7f9919720c50" tokenDef="0x7f9919712d20" name="UART1_is_tx_done" type="Function"/>
        <function id="0x7f9919711280" tokenDef="0x7f9919712f80" name="UART1_get_last_status" type="Function"/>
        <function id="0x7f9919711320" tokenDef="0x7f9919710a30" name="UART1_Read" type="Function"/>
        <function id="0x7f9919711980" tokenDef="0x7f9919710c10" name="UART1_Write" type="Function">
          <arg nr="1" variable="0x7f9919720cf0"/>
        </function>
        <function id="0x7f9919711a20" tokenDef="0x7f9919710ec0" name="UART1_SetFramingErrorHandler" type="Function">
          <arg nr="1" variable="0x7f9919708ed0"/>
        </function>
        <function id="0x7f9919711570" tokenDef="0x7f99197209e0" name="UART1_SetOverrunErrorHandler" type="Function">
          <arg nr="1" variable="0x7f9919708c50"/>
        </function>
        <function id="0x7f9919711610" tokenDef="0x7f9919720ea0" name="UART1_SetErrorHandler" type="Function">
          <arg nr="1" variable="0x7f99197094c0"/>
        </function>
      </functionList>
    </scope>
  </scopes>
  <variables>
    <var id="0x7f9919708c50" nameToken="0x7f9919720ba0" typeStartToken="0x7f9919709fa0" typeEndToken="0x7f9919720b50" access="Argument" scope="0x0" constness="0" isArgument="true" isArray="false" isClass="false" isConst="false" isExtern="false" isLocal="false" isPointer="true" isReference="false" isStatic="false"/>
    <var id="0x7f9919708ed0" nameToken="0x7f99197110d0" typeStartToken="0x7f9919710fe0" typeEndToken="0x7f9919711080" access="Argument" scope="0x0" constness="0" isArgument="true" isArray="false" isClass="false" isConst="false" isExtern="false" isLocal="false" isPointer="true" isReference="false" isStatic="false"/>
    <var id="0x7f99197094c0" nameToken="0x7f99197210b0" typeStartToken="0x7f9919720f40" typeEndToken="0x7f9919721060" access="Argument" scope="0x0" constness="0" isArgument="true" isArray="false" isClass="false" isConst="false" isExtern="false" isLocal="false" isPointer="true" isReference="false" isStatic="false"/>
    <var id="0x7f9919720cf0" nameToken="0x7f9919710d80" typeStartToken="0x7f9919710d30" typeEndToken="0x7f9919710d30" access="Argument" scope="0x0" constness="0" isArgument="true" isArray="false" isClass="false" isConst="false" isExtern="false" isLocal="false" isPointer="false" isReference="false" isStatic="false"/>
  </variables>
  <valueflow>
  </valueflow>
</dump>
</dumps>
